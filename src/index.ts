import { app, BrowserWindow, globalShortcut, Menu, Tray } from 'electron';
import * as path from 'path';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const { default: installExtension, REACT_DEVELOPER_TOOLS, REDUX_DEVTOOLS } = require('electron-devtools-installer');
const isDev = process.env.NODE_ENV == 'development';

let tray = null;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "Lost Ark Map",
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
    fullscreenable: true,
    autoHideMenuBar: true,
    frame: false,
    transparent: true,
    resizable: false,
    skipTaskbar: true,
  });

  mainWindow.setAlwaysOnTop(true, 'screen-saver');
  mainWindow.setMinimizable(false);
  mainWindow.setFullScreen(true);
  mainWindow.setVisibleOnAllWorkspaces(true);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (isDev) {
    // Open the DevTools.
   // mainWindow.webContents.openDevTools();
  }

  globalShortcut.register('CmdOrCtrl + H', () => {
    mainWindow.webContents.send('visibility-change', false);
  });
};

// Disable Hardware Acceleration.
app.disableHardwareAcceleration();

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
app.whenReady().then(() => {

  if (isDev) {
    installExtension(REACT_DEVELOPER_TOOLS)
      .then((name: string) => console.log(`Added Extension:  ${name}`))
      .catch((err: any) => console.log('An error occurred: ', err));

    installExtension(REDUX_DEVTOOLS)
      .then((name: string) => console.log(`Added Extension:  ${name}`))
      .catch((err: any) => console.log('An error occurred: ', err));
  }

  const iconPath = path.join(__dirname, 'assets', 'favicon.ico')
  tray = new Tray(iconPath);

  const contextMenu = Menu.buildFromTemplate([
    { label: 'Exit', 'click': app.quit }
  ]);

  tray.setToolTip('Lost Ark Map');
  tray.setContextMenu(contextMenu);
});